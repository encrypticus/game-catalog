{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MyProjects\\\\game-catalog\\\\pages\\\\game\\\\[slug].js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport Router, { useRouter } from 'next/router';\nimport PropTypes from 'prop-types';\nimport { MetroSpinner } from 'react-spinners-kit';\nimport { PageHead } from '../../components/Head';\nimport { Header } from '../../components/Header';\nimport { Slider } from '../../components/Slider';\nimport { useStyles } from '../../styles/styles';\nimport { rawgConnector } from '../../utils/rawg-connector';\nexport default function Game({\n  game,\n  screenshots\n}) {\n  const {\n    name,\n    description,\n    website\n  } = game;\n  const descrRef = useRef(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n\n  const startLoading = () => setLoading(true);\n\n  const stopLoading = () => setLoading(false);\n\n  const styles = useStyles();\n  const router = useRouter();\n  useEffect(() => {\n    const descrBlock = descrRef.current;\n    descrBlock && (descrBlock.innerHTML = description);\n  }, []);\n  useEffect(() => {\n    Router.events.on('routeChangeStart', startLoading);\n    Router.events.on('routeChangeComplete', stopLoading);\n    return () => {\n      Router.events.off('routeChangeStart', startLoading);\n      Router.events.off('routeChangeComplete', stopLoading);\n    };\n  }, []);\n\n  const renderSpinner = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spinner-container\",\n    children: /*#__PURE__*/_jsxDEV(MetroSpinner, {\n      color: \"#83838A\",\n      size: 60\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n\n  const renderLink = () => /*#__PURE__*/_jsxDEV(\"a\", {\n    className: styles.gameLink,\n    href: website,\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    children: website\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-container\",\n    children: [/*#__PURE__*/_jsxDEV(PageHead, {\n      title: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      page: \"game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.nameWrapper,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: styles.btnBack,\n            onClick: () => router.back(),\n            children: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            className: styles.gameName,\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.sliderWrapper,\n          children: [/*#__PURE__*/_jsxDEV(Slider, {\n            urls: screenshots,\n            alt: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), loading && renderSpinner()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.linkWrapper,\n          children: [\"homepage:\", ' ', website ? renderLink() : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.linkCap,\n            children: \"Unknown\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.description,\n          ref: descrRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\nGame.propTypes = {\n  game: PropTypes.object.isRequired,\n  screenshots: PropTypes.array.isRequired\n};\nexport async function getServerSideProps({\n  query\n}) {\n  const {\n    slug,\n    screenshots\n  } = query;\n  let game;\n\n  try {\n    game = await rawgConnector.getGameData(slug);\n  } catch ({\n    message\n  }) {\n    game = {\n      error: {\n        message\n      }\n    };\n  }\n\n  return {\n    props: {\n      game,\n      screenshots: JSON.parse(screenshots)\n    }\n  };\n}","map":{"version":3,"sources":["D:/MyProjects/game-catalog/pages/game/[slug].js"],"names":["React","useEffect","useRef","useState","Router","useRouter","PropTypes","MetroSpinner","PageHead","Header","Slider","useStyles","rawgConnector","Game","game","screenshots","name","description","website","descrRef","loading","setLoading","startLoading","stopLoading","styles","router","descrBlock","current","innerHTML","events","on","off","renderSpinner","renderLink","gameLink","nameWrapper","btnBack","back","gameName","sliderWrapper","linkWrapper","linkCap","propTypes","object","isRequired","array","getServerSideProps","query","slug","getGameData","message","error","props","JSON","parse"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nimport Router, { useRouter } from 'next/router';\nimport PropTypes from 'prop-types';\nimport { MetroSpinner } from 'react-spinners-kit';\n\nimport { PageHead } from '../../components/Head';\nimport { Header } from '../../components/Header';\nimport { Slider } from '../../components/Slider';\nimport { useStyles } from '../../styles/styles';\nimport { rawgConnector } from '../../utils/rawg-connector';\n\nexport default function Game({ game, screenshots }) {\n  const {\n    name, description, website,\n  } = game;\n  const descrRef = useRef(null);\n  const [loading, setLoading] = useState(false);\n  const startLoading = () => setLoading(true);\n  const stopLoading = () => setLoading(false);\n  const styles = useStyles();\n  const router = useRouter();\n\n  useEffect(() => {\n    const descrBlock = descrRef.current;\n    descrBlock && (descrBlock.innerHTML = description);\n  }, []);\n\n  useEffect(() => {\n    Router.events.on('routeChangeStart', startLoading);\n    Router.events.on('routeChangeComplete', stopLoading);\n    return () => {\n      Router.events.off('routeChangeStart', startLoading);\n      Router.events.off('routeChangeComplete', stopLoading);\n    };\n  }, []);\n\n  const renderSpinner = () => (\n    <div className=\"spinner-container\">\n      <MetroSpinner color=\"#83838A\" size={60} />\n    </div>\n  );\n\n  const renderLink = () => (\n    <a\n      className={styles.gameLink}\n      href={website}\n      target=\"_blank\"\n      rel=\"noreferrer\"\n    >\n      {website}\n    </a>\n  );\n\n  return (\n    <div className=\"page-container\">\n      <PageHead title={name} />\n      <Header page=\"game\" />\n      <main>\n        <div className=\"container\">\n          <div className={styles.nameWrapper}>\n            <button\n              type=\"button\"\n              className={styles.btnBack}\n              onClick={() => router.back()}\n            >\n              Back\n            </button>\n            <h1 className={styles.gameName}>\n              {name}\n            </h1>\n          </div>\n          <div className={styles.sliderWrapper}>\n            <Slider\n              urls={screenshots}\n              alt={name}\n            />\n            {loading && renderSpinner()}\n          </div>\n          <div className={styles.linkWrapper}>\n            homepage:\n            {' '}\n            {website ? renderLink() : <div className={styles.linkCap}>Unknown</div>}\n          </div>\n          <div className={styles.description} ref={descrRef} />\n        </div>\n      </main>\n    </div>\n  );\n}\n\nGame.propTypes = {\n  game: PropTypes.object.isRequired,\n  screenshots: PropTypes.array.isRequired,\n};\n\nexport async function getServerSideProps({ query }) {\n  const { slug, screenshots } = query;\n  let game;\n\n  try {\n    game = await rawgConnector.getGameData(slug);\n  } catch ({ message }) {\n    game = { error: { message } };\n  }\n\n  return {\n    props: {\n      game,\n      screenshots: JSON.parse(screenshots),\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}