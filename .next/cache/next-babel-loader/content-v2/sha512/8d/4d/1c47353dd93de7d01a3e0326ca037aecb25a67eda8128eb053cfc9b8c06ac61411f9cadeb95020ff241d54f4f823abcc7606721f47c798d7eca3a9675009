{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MyProjects\\\\game-catalog\\\\pages\\\\game\\\\[slug].js\";\nimport React, { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { PageHead } from '../../components/Head';\nimport { Header } from '../../components/Header';\nimport { Slider } from '../../components/Slider';\nimport { rawgConnector } from '../../utils/rawg-connector';\nexport default function Game({\n  game,\n  screenshots\n}) {\n  const {\n    name,\n    slug,\n    description,\n    website\n  } = game;\n  const descrRef = useRef(null);\n  useEffect(() => {\n    const descrBlock = descrRef.current;\n    descrBlock.innerHTML(description);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-container\",\n    children: [/*#__PURE__*/_jsxDEV(PageHead, {\n      title: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"name: \", slug]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"site: \", website]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"description\",\n          ref: descrRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '80%',\n            margin: 'auto'\n          },\n          children: /*#__PURE__*/_jsxDEV(Slider, {\n            urls: screenshots,\n            alt: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n} // export async function getStaticPaths() {\n//   const games = await rawgConnector.getGamesData({ options: { page_size: 10000 } });\n//\n//   const paths = games.results.map((game) => ({\n//     params: { slug: game.slug },\n//   }));\n//\n//   return {\n//     paths,\n//     fallback: false,\n//   };\n// }\n//\n// export async function getStaticProps({ params }) {\n//   const game = await rawgConnector.getGameData(params.slug);\n//\n//   return { props: { game } };\n// }\n\nGame.propTypes = {\n  game: PropTypes.object.isRequired\n};\nexport async function getServerSideProps({\n  query\n}) {\n  const {\n    slug,\n    screenshots\n  } = query;\n  let game;\n\n  try {\n    game = await rawgConnector.getGameData(slug);\n  } catch ({\n    message\n  }) {\n    game = {\n      error: {\n        message\n      }\n    };\n  }\n\n  return {\n    props: {\n      game,\n      screenshots: JSON.parse(screenshots)\n    }\n  };\n}","map":{"version":3,"sources":["D:/MyProjects/game-catalog/pages/game/[slug].js"],"names":["React","useEffect","useRef","PropTypes","PageHead","Header","Slider","rawgConnector","Game","game","screenshots","name","slug","description","website","descrRef","descrBlock","current","innerHTML","width","margin","propTypes","object","isRequired","getServerSideProps","query","getGameData","message","error","props","JSON","parse"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,SAASC,aAAT,QAA8B,4BAA9B;AAEA,eAAe,SAASC,IAAT,CAAc;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAd,EAAqC;AAClD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcC,IAAAA,WAAd;AAA2BC,IAAAA;AAA3B,MAAwCL,IAA9C;AACA,QAAMM,QAAQ,GAAGb,MAAM,CAAC,IAAD,CAAvB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,UAAU,GAAGD,QAAQ,CAACE,OAA5B;AACAD,IAAAA,UAAU,CAACE,SAAX,CAAqBL,WAArB;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BACE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEF;AAAjB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACE;AAAA,+BAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,+BAAYE,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAK,UAAA,EAAE,EAAC,aAAR;AAAsB,UAAA,GAAG,EAAEC;AAA3B;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE;AAAK,UAAA,KAAK,EAAE;AAAEI,YAAAA,KAAK,EAAE,KAAT;AAAgBC,YAAAA,MAAM,EAAE;AAAxB,WAAZ;AAAA,iCACE,QAAC,MAAD;AACE,YAAA,IAAI,EAAEV,WADR;AAEE,YAAA,GAAG,EAAEC;AAFP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAH,IAAI,CAACa,SAAL,GAAiB;AACfZ,EAAAA,IAAI,EAAEN,SAAS,CAACmB,MAAV,CAAiBC;AADR,CAAjB;AAIA,OAAO,eAAeC,kBAAf,CAAkC;AAAEC,EAAAA;AAAF,CAAlC,EAA6C;AAClD,QAAM;AAAEb,IAAAA,IAAF;AAAQF,IAAAA;AAAR,MAAwBe,KAA9B;AACA,MAAIhB,IAAJ;;AAEA,MAAI;AACFA,IAAAA,IAAI,GAAG,MAAMF,aAAa,CAACmB,WAAd,CAA0Bd,IAA1B,CAAb;AACD,GAFD,CAEE,OAAO;AAAEe,IAAAA;AAAF,GAAP,EAAoB;AACpBlB,IAAAA,IAAI,GAAG;AAAEmB,MAAAA,KAAK,EAAE;AAAED,QAAAA;AAAF;AAAT,KAAP;AACD;;AAED,SAAO;AACLE,IAAAA,KAAK,EAAE;AACLpB,MAAAA,IADK;AAELC,MAAAA,WAAW,EAAEoB,IAAI,CAACC,KAAL,CAAWrB,WAAX;AAFR;AADF,GAAP;AAMD","sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport { PageHead } from '../../components/Head';\nimport { Header } from '../../components/Header';\nimport { Slider } from '../../components/Slider';\nimport { rawgConnector } from '../../utils/rawg-connector';\n\nexport default function Game({ game, screenshots }) {\n  const { name, slug, description, website, } = game;\n  const descrRef = useRef(null);\n\n  useEffect(() => {\n    const descrBlock = descrRef.current;\n    descrBlock.innerHTML(description);\n  }, []);\n\n  return (\n    <div className=\"page-container\">\n      <PageHead title={name} />\n      <Header />\n      <main>\n        <div className=\"container\">\n          <div>name: {slug}</div>\n          <div>site: {website}</div>\n          <div id=\"description\" ref={descrRef}></div>\n          <div style={{ width: '80%', margin: 'auto' }}>\n            <Slider\n              urls={screenshots}\n              alt={name}\n            />\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\n// export async function getStaticPaths() {\n//   const games = await rawgConnector.getGamesData({ options: { page_size: 10000 } });\n//\n//   const paths = games.results.map((game) => ({\n//     params: { slug: game.slug },\n//   }));\n//\n//   return {\n//     paths,\n//     fallback: false,\n//   };\n// }\n//\n// export async function getStaticProps({ params }) {\n//   const game = await rawgConnector.getGameData(params.slug);\n//\n//   return { props: { game } };\n// }\nGame.propTypes = {\n  game: PropTypes.object.isRequired,\n};\n\nexport async function getServerSideProps({ query }) {\n  const { slug, screenshots } = query;\n  let game;\n\n  try {\n    game = await rawgConnector.getGameData(slug);\n  } catch ({ message }) {\n    game = { error: { message } };\n  }\n\n  return {\n    props: {\n      game,\n      screenshots: JSON.parse(screenshots),\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}