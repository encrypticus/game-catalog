{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport Router, { useRouter } from 'next/router';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { MetroSpinner } from 'react-spinners-kit';\nimport { add, changeOptions } from '../../redux/reducers/games-data-reducer';\nimport { GameListItem } from './GameListItem';\nimport { useStyles } from './styles';\nimport { getQueryString } from '../../utils/query-string';\nexport const GameList = ({\n  gamesData\n}) => {\n  const styles = useStyles();\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const {\n    gamesDataReducer: {\n      gamesData: {\n        results\n      },\n      options\n    }\n  } = useSelector(state => state);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n\n  const startLoading = () => setLoading(true);\n\n  const stopLoading = () => setLoading(false);\n\n  useEffect(() => {\n    if (gamesData) {\n      if (gamesData.error) {\n        console.log(gamesData.error);\n      } else {\n        dispatch(add(gamesData.gamesData));\n      }\n    }\n  }, [gamesData]);\n  useEffect(() => {\n    dispatch(changeOptions(gamesData.options));\n  }, []);\n  useEffect(() => {\n    Router.events.on('routeChangeStart', startLoading);\n    Router.events.on('routeChangeComplete', stopLoading);\n    return () => {\n      Router.events.off('routeChangeStart', startLoading);\n      Router.events.off('routeChangeComplete', stopLoading);\n    };\n  }, []);\n\n  const handleScroll = () => {\n    const lastItemLoaded = document.querySelector('.game-list > .game-list__item:last-child');\n\n    if (lastItemLoaded) {\n      const lastItemLoadedOffset = lastItemLoaded.offsetTop + lastItemLoaded.clientHeight;\n      const pageOffset = window.pageYOffset + window.innerHeight;\n\n      if (pageOffset > lastItemLoadedOffset && !loading) {\n        if (gamesData.page < gamesData.maxPage) {\n          const nextPage = parseInt(gamesData.page, 10) + 1;\n          const settings = {\n            options: _objectSpread({\n              page: nextPage\n            }, options)\n          };\n          const optionsQueryString = getQueryString(options);\n          const queryString = `${router.pathname}?page=${nextPage}${optionsQueryString}`;\n          router.push(queryString, queryString, {\n            scroll: false\n          });\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  });\n\n  const renderGameList = gamesList => gamesList.map(gameListItem => /*#__PURE__*/_jsx(GameListItem, {\n    gameInfo: gameListItem\n  }, gameListItem.id));\n\n  const renderSpinner = () => /*#__PURE__*/_jsx(\"div\", {\n    className: \"spinner-container\",\n    children: /*#__PURE__*/_jsx(MetroSpinner, {\n      color: \"#83838A\",\n      size: 60\n    })\n  });\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"ul\", {\n      className: `${styles.root} game-list`,\n      children: renderGameList(results)\n    }), loading && renderSpinner()]\n  });\n};","map":null,"metadata":{},"sourceType":"module"}