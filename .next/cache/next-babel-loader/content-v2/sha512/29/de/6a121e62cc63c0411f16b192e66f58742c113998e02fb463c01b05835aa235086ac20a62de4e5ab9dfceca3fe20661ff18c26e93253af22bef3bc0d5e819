{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MyProjects\\\\game-catalog\\\\components\\\\Filtering\\\\Filtering.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useRouter } from 'next/router';\nimport { changeOptions, clearGamesData, resetFilter } from '../../redux/reducers/games-data-reducer';\nimport { getQueryString } from '../../utils/query-string';\nimport { useStyles } from './styles';\nexport const Filtering = ({\n  platforms\n}) => {\n  const {\n    0: value,\n    1: setValue\n  } = useState('');\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const {\n    gamesDataReducer: {\n      options,\n      options: {\n        platforms: optionsPlatforms\n      }\n    }\n  } = useSelector(state => state);\n  const styles = useStyles();\n  useEffect(() => {\n    if (value) {\n      const optionsQueryString = getQueryString(options);\n      const queryString = `${router.pathname}?${optionsQueryString}`;\n      router.push(queryString);\n    }\n  }, [optionsPlatforms]);\n\n  const handleChangeValue = ({\n    target: {\n      value\n    }\n  }) => {\n    setValue(value);\n\n    if (value === 'none') {\n      dispatch(resetFilter());\n    } else {\n      dispatch(changeOptions(_objectSpread(_objectSpread({}, options), {}, {\n        platforms: value\n      })));\n    }\n\n    dispatch(clearGamesData());\n  };\n\n  const renderSelect = platforms => platforms.map(({\n    id,\n    name\n  }) => /*#__PURE__*/_jsxDEV(\"option\", {\n    value: id,\n    children: name\n  }, id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 7\n  }, this));\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: styles.root,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: styles.title,\n      children: \"Filter By: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      className: styles.field,\n      value: value,\n      onChange: handleChangeValue,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"none\",\n        children: \"reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), renderSelect(platforms)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\nFiltering.propTypes = {\n  platforms: PropTypes.array.isRequired\n};","map":{"version":3,"sources":["D:/MyProjects/game-catalog/components/Filtering/Filtering.jsx"],"names":["React","useEffect","useState","useDispatch","useSelector","PropTypes","useRouter","changeOptions","clearGamesData","resetFilter","getQueryString","useStyles","Filtering","platforms","value","setValue","dispatch","router","gamesDataReducer","options","optionsPlatforms","state","styles","optionsQueryString","queryString","pathname","push","handleChangeValue","target","renderSelect","map","id","name","root","title","field","propTypes","array","isRequired"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,SAASC,aAAT,EAAwBC,cAAxB,EAAwCC,WAAxC,QAA2D,yCAA3D;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,SAAT,QAA0B,UAA1B;AAEA,OAAO,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAC1C,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBb,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMc,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAMc,MAAM,GAAGX,SAAS,EAAxB;AACA,QAAM;AAAEY,IAAAA,gBAAgB,EAAE;AAAEC,MAAAA,OAAF;AAAWA,MAAAA,OAAO,EAAE;AAAEN,QAAAA,SAAS,EAAEO;AAAb;AAApB;AAApB,MAA8EhB,WAAW,CAACiB,KAAK,IAAIA,KAAV,CAA/F;AACA,QAAMC,MAAM,GAAGX,SAAS,EAAxB;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,KAAJ,EAAW;AACT,YAAMS,kBAAkB,GAAGb,cAAc,CAACS,OAAD,CAAzC;AACA,YAAMK,WAAW,GAAI,GAAEP,MAAM,CAACQ,QAAS,IAAGF,kBAAmB,EAA7D;AACAN,MAAAA,MAAM,CAACS,IAAP,CAAYF,WAAZ;AACD;AACF,GANQ,EAMN,CAACJ,gBAAD,CANM,CAAT;;AAQA,QAAMO,iBAAiB,GAAG,CAAC;AAAEC,IAAAA,MAAM,EAAE;AAAEd,MAAAA;AAAF;AAAV,GAAD,KAA2B;AACnDC,IAAAA,QAAQ,CAACD,KAAD,CAAR;;AACA,QAAIA,KAAK,KAAK,MAAd,EAAsB;AACpBE,MAAAA,QAAQ,CAACP,WAAW,EAAZ,CAAR;AACD,KAFD,MAEO;AACLO,MAAAA,QAAQ,CAACT,aAAa,iCAAMY,OAAN;AAAeN,QAAAA,SAAS,EAAEC;AAA1B,SAAd,CAAR;AACD;;AACDE,IAAAA,QAAQ,CAACR,cAAc,EAAf,CAAR;AACD,GARD;;AAUA,QAAMqB,YAAY,GAAIhB,SAAD,IACnBA,SAAS,CAACiB,GAAV,CAAc,CAAC;AAAEC,IAAAA,EAAF;AAAMC,IAAAA;AAAN,GAAD,kBACZ;AAAiB,IAAA,KAAK,EAAED,EAAxB;AAAA,cACGC;AADH,KAAaD,EAAb;AAAA;AAAA;AAAA;AAAA,UADF,CADF;;AAQA,sBACE;AAAM,IAAA,SAAS,EAAET,MAAM,CAACW,IAAxB;AAAA,4BACE;AAAM,MAAA,SAAS,EAAEX,MAAM,CAACY,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,SAAS,EAAEZ,MAAM,CAACa,KADpB;AAEE,MAAA,KAAK,EAAErB,KAFT;AAGE,MAAA,QAAQ,EAAEa,iBAHZ;AAAA,8BAKE;AAAQ,QAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,EAQGE,YAAY,CAAChB,SAAD,CARf;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAhDM;AAkDPD,SAAS,CAACwB,SAAV,GAAsB;AACpBvB,EAAAA,SAAS,EAAER,SAAS,CAACgC,KAAV,CAAgBC;AADP,CAAtB","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport PropTypes from 'prop-types';\nimport { useRouter } from 'next/router';\n\nimport { changeOptions, clearGamesData, resetFilter } from '../../redux/reducers/games-data-reducer';\nimport { getQueryString } from '../../utils/query-string';\nimport { useStyles } from './styles';\n\nexport const Filtering = ({ platforms }) => {\n  const [value, setValue] = useState('');\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const { gamesDataReducer: { options, options: { platforms: optionsPlatforms } } } = useSelector(state => state);\n  const styles = useStyles();\n\n  useEffect(() => {\n    if (value) {\n      const optionsQueryString = getQueryString(options);\n      const queryString = `${router.pathname}?${optionsQueryString}`;\n      router.push(queryString);\n    }\n  }, [optionsPlatforms]);\n\n  const handleChangeValue = ({ target: { value } }) => {\n    setValue(value);\n    if (value === 'none') {\n      dispatch(resetFilter());\n    } else {\n      dispatch(changeOptions({ ...options, platforms: value }));\n    }\n    dispatch(clearGamesData());\n  };\n\n  const renderSelect = (platforms) => (\n    platforms.map(({ id, name }) => (\n      <option key={id} value={id}>\n        {name}\n      </option>\n    ))\n  );\n\n  return (\n    <form className={styles.root}>\n      <span className={styles.title}>Filter By: </span>\n      <select\n        className={styles.field}\n        value={value}\n        onChange={handleChangeValue}\n      >\n        <option value=\"none\">\n          reset\n        </option>\n        {renderSelect(platforms)}\n      </select>\n    </form>\n  );\n};\n\nFiltering.propTypes = {\n  platforms: PropTypes.array.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}