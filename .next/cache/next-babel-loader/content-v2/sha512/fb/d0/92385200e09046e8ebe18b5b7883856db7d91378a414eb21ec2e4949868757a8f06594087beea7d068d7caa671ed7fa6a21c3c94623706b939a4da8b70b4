{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  gamesData: {\n    count: '',\n    results: []\n  },\n  options: {},\n  query: ''\n};\nconst gamesReducer = createSlice({\n  name: 'gamesData',\n  initialState,\n  reducers: {\n    add(state, {\n      payload: {\n        count,\n        results\n      }\n    }) {\n      const {\n        gamesData: {\n          results: currentResults\n        }\n      } = state;\n      const filtered = results.filter(el => currentResults.every(cur => el.id !== cur.id));\n      state.gamesData.count = count;\n      state.gamesData.results = [...currentResults, ...filtered];\n    },\n\n    clearGamesData(state) {\n      state.gamesData = {\n        count: 0,\n        results: []\n      };\n    },\n\n    changeOptions(state, {\n      payload\n    }) {\n      state.options = _objectSpread(_objectSpread({}, state.options), payload);\n    },\n\n    resetFilter(state) {\n      state.options.remove('platforms');\n    }\n\n  }\n});\nexport const {\n  reducer: gamesDataReducer,\n  actions: {\n    add,\n    clearGamesData,\n    changeOptions,\n    resetFilter\n  }\n} = gamesReducer;","map":{"version":3,"sources":["D:/MyProjects/game-catalog/redux/reducers/games-data-reducer.js"],"names":["createSlice","initialState","gamesData","count","results","options","query","gamesReducer","name","reducers","add","state","payload","currentResults","filtered","filter","el","every","cur","id","clearGamesData","changeOptions","resetFilter","remove","reducer","gamesDataReducer","actions"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE;AACTC,IAAAA,KAAK,EAAE,EADE;AAETC,IAAAA,OAAO,EAAE;AAFA,GADQ;AAKnBC,EAAAA,OAAO,EAAE,EALU;AAMnBC,EAAAA,KAAK,EAAE;AANY,CAArB;AASA,MAAMC,YAAY,GAAGP,WAAW,CAAC;AAC/BQ,EAAAA,IAAI,EAAE,WADyB;AAE/BP,EAAAA,YAF+B;AAG/BQ,EAAAA,QAAQ,EAAE;AACRC,IAAAA,GAAG,CAACC,KAAD,EAAQ;AAAEC,MAAAA,OAAO,EAAE;AAAET,QAAAA,KAAF;AAASC,QAAAA;AAAT;AAAX,KAAR,EAAyC;AAC1C,YAAM;AAAEF,QAAAA,SAAS,EAAE;AAAEE,UAAAA,OAAO,EAAES;AAAX;AAAb,UAA6CF,KAAnD;AACA,YAAMG,QAAQ,GAAGV,OAAO,CAACW,MAAR,CAAeC,EAAE,IAAIH,cAAc,CAACI,KAAf,CAAqBC,GAAG,IAAIF,EAAE,CAACG,EAAH,KAAUD,GAAG,CAACC,EAA1C,CAArB,CAAjB;AACAR,MAAAA,KAAK,CAACT,SAAN,CAAgBC,KAAhB,GAAwBA,KAAxB;AACAQ,MAAAA,KAAK,CAACT,SAAN,CAAgBE,OAAhB,GAA0B,CAAC,GAAGS,cAAJ,EAAoB,GAAGC,QAAvB,CAA1B;AACD,KANO;;AAORM,IAAAA,cAAc,CAACT,KAAD,EAAQ;AACpBA,MAAAA,KAAK,CAACT,SAAN,GAAkB;AAChBC,QAAAA,KAAK,EAAE,CADS;AAEhBC,QAAAA,OAAO,EAAE;AAFO,OAAlB;AAID,KAZO;;AAaRiB,IAAAA,aAAa,CAACV,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAAqB;AAChCD,MAAAA,KAAK,CAACN,OAAN,mCAAqBM,KAAK,CAACN,OAA3B,GAAuCO,OAAvC;AACD,KAfO;;AAgBRU,IAAAA,WAAW,CAACX,KAAD,EAAQ;AACjBA,MAAAA,KAAK,CAACN,OAAN,CAAckB,MAAd,CAAqB,WAArB;AACD;;AAlBO;AAHqB,CAAD,CAAhC;AAyBA,OAAO,MAAM;AACXC,EAAAA,OAAO,EAAEC,gBADE;AAEXC,EAAAA,OAAO,EAAE;AACPhB,IAAAA,GADO;AAEPU,IAAAA,cAFO;AAGPC,IAAAA,aAHO;AAIPC,IAAAA;AAJO;AAFE,IAQTf,YARG","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  gamesData: {\n    count: '',\n    results: [],\n  },\n  options: {},\n  query: '',\n};\n\nconst gamesReducer = createSlice({\n  name: 'gamesData',\n  initialState,\n  reducers: {\n    add(state, { payload: { count, results } }) {\n      const { gamesData: { results: currentResults } } = state;\n      const filtered = results.filter(el => currentResults.every(cur => el.id !== cur.id));\n      state.gamesData.count = count;\n      state.gamesData.results = [...currentResults, ...filtered];\n    },\n    clearGamesData(state) {\n      state.gamesData = {\n        count: 0,\n        results: [],\n      };\n    },\n    changeOptions(state, { payload }) {\n      state.options = { ...state.options, ...payload };\n    },\n    resetFilter(state) {\n      state.options.remove('platforms');\n    }\n  },\n});\n\nexport const {\n  reducer: gamesDataReducer,\n  actions: {\n    add,\n    clearGamesData,\n    changeOptions,\n    resetFilter,\n  }\n} = gamesReducer;\n"]},"metadata":{},"sourceType":"module"}