{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport Router, { useRouter } from 'next/router';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { MetroSpinner } from 'react-spinners-kit';\nimport { add, changeOptions } from '../../redux/reducers/games-data-reducer';\nimport { getQueryString } from '../../utils/query-string';\nimport { GameListItem } from './GameListItem';\nimport { useStyles } from './styles';\nexport var GameList = function GameList(_ref) {\n  var gamesData = _ref.gamesData;\n  var styles = useStyles();\n  var router = useRouter();\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state;\n  }),\n      _useSelector$gamesDat = _useSelector.gamesDataReducer,\n      results = _useSelector$gamesDat.gamesData.results,\n      options = _useSelector$gamesDat.options;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var startLoading = function startLoading() {\n    return setLoading(true);\n  };\n\n  var stopLoading = function stopLoading() {\n    return setLoading(false);\n  };\n\n  useEffect(function () {\n    if (gamesData) {\n      if (gamesData.error) {\n        console.log(gamesData.error);\n      } else {\n        dispatch(add(gamesData.gamesData));\n      }\n    }\n  }, [gamesData]);\n  useEffect(function () {\n    dispatch(changeOptions(gamesData.options));\n  }, []);\n  useEffect(function () {\n    Router.events.on('routeChangeStart', startLoading);\n    Router.events.on('routeChangeComplete', stopLoading);\n    return function () {\n      Router.events.off('routeChangeStart', startLoading);\n      Router.events.off('routeChangeComplete', stopLoading);\n    };\n  }, []);\n\n  var handleScroll = function handleScroll() {\n    var lastItemLoaded = document.querySelector('.game-list > .game-list__item:last-child');\n\n    if (lastItemLoaded) {\n      var lastItemLoadedOffset = lastItemLoaded.offsetTop + lastItemLoaded.clientHeight;\n      var pageOffset = window.pageYOffset + window.innerHeight;\n\n      if (pageOffset > lastItemLoadedOffset && !loading) {\n        if (gamesData.page < gamesData.maxPage) {\n          var nextPage = parseInt(gamesData.page, 10) + 1;\n          var optionsQueryString = getQueryString(options);\n          var queryString = \"\".concat(router.pathname, \"?page=\").concat(nextPage).concat(optionsQueryString);\n          router.push(queryString, queryString, {\n            scroll: false\n          });\n        }\n      }\n    }\n  };\n\n  useEffect(function () {\n    window.addEventListener('scroll', handleScroll);\n    return function () {\n      return window.removeEventListener('scroll', handleScroll);\n    };\n  });\n\n  var renderGameList = function renderGameList(gamesList) {\n    return gamesList.map(function (gameListItem) {\n      return /*#__PURE__*/_jsx(GameListItem, {\n        gameInfo: gameListItem\n      }, gameListItem.id);\n    });\n  };\n\n  var renderSpinner = function renderSpinner() {\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: \"spinner-container\",\n      children: /*#__PURE__*/_jsx(MetroSpinner, {\n        color: \"#83838A\",\n        size: 60\n      })\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"ul\", {\n      className: \"\".concat(styles.root, \" game-list\"),\n      children: renderGameList(results)\n    }), loading && renderSpinner()]\n  });\n};","map":null,"metadata":{},"sourceType":"module"}