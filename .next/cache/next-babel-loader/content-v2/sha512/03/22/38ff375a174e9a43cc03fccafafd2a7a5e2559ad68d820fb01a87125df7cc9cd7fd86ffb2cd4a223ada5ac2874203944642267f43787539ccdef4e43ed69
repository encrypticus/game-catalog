{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MyProjects\\\\game-catalog\\\\components\\\\GameList\\\\GameList.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport Router, { useRouter } from 'next/router';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { MetroSpinner } from 'react-spinners-kit';\nimport { add, changeOptions } from '../../redux/reducers/games-data-reducer';\nimport { GameListItem } from './GameListItem';\nimport { useStyles } from './styles';\nimport { getQueryString } from '../../utils/query-string';\nexport const GameList = ({\n  gamesData\n}) => {\n  const styles = useStyles();\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const {\n    gamesDataReducer: {\n      gamesData: {\n        results\n      },\n      options\n    }\n  } = useSelector(state => state);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n\n  const startLoading = () => setLoading(true);\n\n  const stopLoading = () => setLoading(false);\n\n  useEffect(() => {\n    console.log(gamesData);\n\n    if (gamesData) {\n      if (gamesData.error) {\n        console.log(gamesData.error);\n      } else {\n        dispatch(add(gamesData.gamesData));\n      }\n    }\n  }, [gamesData]);\n  useEffect(() => {\n    dispatch(changeOptions(gamesData.options));\n  }, []);\n  useEffect(() => {\n    Router.events.on('routeChangeStart', startLoading);\n    Router.events.on('routeChangeComplete', stopLoading);\n    return () => {\n      Router.events.off('routeChangeStart', startLoading);\n      Router.events.off('routeChangeComplete', stopLoading);\n    };\n  }, []);\n\n  const handleScroll = () => {\n    const lastItemLoaded = document.querySelector('.game-list > .game-list__item:last-child');\n\n    if (lastItemLoaded) {\n      const lastItemLoadedOffset = lastItemLoaded.offsetTop + lastItemLoaded.clientHeight;\n      const pageOffset = window.pageYOffset + window.innerHeight;\n\n      if (pageOffset > lastItemLoadedOffset && !loading) {\n        if (gamesData.page < gamesData.maxPage) {\n          const nextPage = parseInt(gamesData.page, 10) + 1;\n          const settings = {\n            options: _objectSpread({\n              page: nextPage\n            }, options)\n          };\n          const optionsQueryString = getQueryString(options);\n          const queryString = `${router.pathname}?page=${nextPage}${optionsQueryString}`;\n          router.push(queryString, queryString, {\n            scroll: false\n          });\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  });\n\n  const renderGameList = gamesList => gamesList.map(gameListItem => /*#__PURE__*/_jsxDEV(GameListItem, {\n    gameInfo: gameListItem\n  }, gameListItem.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 7\n  }, this));\n\n  const renderSpinner = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spinner-container\",\n    children: /*#__PURE__*/_jsxDEV(MetroSpinner, {\n      color: \"#83838A\",\n      size: 60\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      className: `${styles.root} game-list`,\n      children: renderGameList(results)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), loading && renderSpinner()]\n  }, void 0, true);\n};\nGameList.propTypes = {\n  gamesData: PropTypes.object.isRequired\n};","map":{"version":3,"sources":["D:/MyProjects/game-catalog/components/GameList/GameList.jsx"],"names":["React","useEffect","useRef","useState","Router","useRouter","useSelector","useDispatch","PropTypes","MetroSpinner","add","changeOptions","GameListItem","useStyles","getQueryString","GameList","gamesData","styles","router","dispatch","gamesDataReducer","results","options","state","loading","setLoading","startLoading","stopLoading","console","log","error","events","on","off","handleScroll","lastItemLoaded","document","querySelector","lastItemLoadedOffset","offsetTop","clientHeight","pageOffset","window","pageYOffset","innerHeight","page","maxPage","nextPage","parseInt","settings","optionsQueryString","queryString","pathname","push","scroll","addEventListener","removeEventListener","renderGameList","gamesList","map","gameListItem","id","renderSpinner","root","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\n\r\nimport Router, { useRouter } from 'next/router';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { MetroSpinner } from 'react-spinners-kit';\r\n\r\nimport { add, changeOptions } from '../../redux/reducers/games-data-reducer';\r\nimport { GameListItem } from './GameListItem';\r\nimport { useStyles } from './styles';\r\nimport { getQueryString } from '../../utils/query-string';\r\n\r\nexport const GameList = ({ gamesData }) => {\r\n  const styles = useStyles();\r\n  const router = useRouter();\r\n  const dispatch = useDispatch();\r\n  const { gamesDataReducer: { gamesData: { results }, options } } = useSelector((state) => state);\r\n  const [loading, setLoading] = useState(false);\r\n  const startLoading = () => setLoading(true);\r\n  const stopLoading = () => setLoading(false);\r\n\r\n  useEffect(() => {\r\n    console.log(gamesData)\r\n    if (gamesData) {\r\n      if (gamesData.error) {\r\n        console.log(gamesData.error);\r\n      } else {\r\n        dispatch(add(gamesData.gamesData));\r\n      }\r\n    }\r\n  }, [gamesData]);\r\n\r\n  useEffect(() => {\r\n    dispatch(changeOptions(gamesData.options));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    Router.events.on('routeChangeStart', startLoading);\r\n    Router.events.on('routeChangeComplete', stopLoading);\r\n    return () => {\r\n      Router.events.off('routeChangeStart', startLoading);\r\n      Router.events.off('routeChangeComplete', stopLoading);\r\n    };\r\n  }, []);\r\n\r\n  const handleScroll = () => {\r\n    const lastItemLoaded = document.querySelector('.game-list > .game-list__item:last-child');\r\n\r\n    if (lastItemLoaded) {\r\n      const lastItemLoadedOffset = lastItemLoaded.offsetTop + lastItemLoaded.clientHeight;\r\n      const pageOffset = window.pageYOffset + window.innerHeight;\r\n\r\n      if (pageOffset > lastItemLoadedOffset && !loading) {\r\n        if (gamesData.page < gamesData.maxPage) {\r\n          const nextPage = parseInt(gamesData.page, 10) + 1;\r\n          const settings = {\r\n            options: { page: nextPage, ...options },\r\n          };\r\n          const optionsQueryString = getQueryString(options);\r\n          const queryString = `${router.pathname}?page=${nextPage}${optionsQueryString}`;\r\n\r\n          router.push(queryString, queryString, { scroll: false });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScroll);\r\n    return () => window.removeEventListener('scroll', handleScroll);\r\n  });\r\n\r\n  const renderGameList = (gamesList) => (\r\n    gamesList.map((gameListItem) => (\r\n      <GameListItem\r\n        key={gameListItem.id}\r\n        gameInfo={gameListItem}\r\n      />\r\n    ))\r\n  );\r\n\r\n  const renderSpinner = () => (\r\n    <div className=\"spinner-container\">\r\n      <MetroSpinner color=\"#83838A\" size={60} />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <ul className={`${styles.root} game-list`}>\r\n        {renderGameList(results)}\r\n      </ul>\r\n      {loading && renderSpinner()}\r\n    </>\r\n  );\r\n};\r\n\r\nGameList.propTypes = {\r\n  gamesData: PropTypes.object.isRequired,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}