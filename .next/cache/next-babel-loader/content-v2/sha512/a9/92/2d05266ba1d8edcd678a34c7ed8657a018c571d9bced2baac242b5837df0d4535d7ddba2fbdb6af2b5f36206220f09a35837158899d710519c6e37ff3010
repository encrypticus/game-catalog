{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { rawgConnector } from '../../utils/rawg-connector';\nexport default (async (req, res) => {\n  const options = Object.assign({}, req.body);\n  const perPage = 20;\n\n  try {\n    const gamesData = await rawgConnector.getGamesData({\n      options\n    });\n    const platforms = await rawgConnector.getPlatformsData();\n    const count = await gamesData.count;\n    const maxPage = Math.ceil(count / perPage);\n\n    const {\n      page\n    } = options,\n          otherOptions = _objectWithoutProperties(options, [\"page\"]);\n\n    res.statusCode = 200;\n    res.json({\n      gamesData,\n      platforms: platforms.results.map(({\n        name,\n        id\n      }) => ({\n        name,\n        id\n      })),\n      page: options.page,\n      maxPage,\n      options: otherOptions\n    });\n  } catch ({\n    message\n  }) {\n    console.log(message);\n  }\n});","map":{"version":3,"sources":["D:/MyProjects/game-catalog/pages/api/games.js"],"names":["rawgConnector","req","res","options","body","perPage","gamesData","getGamesData","platforms","getPlatformsData","count","maxPage","Math","ceil","page","otherOptions","statusCode","json","results","map","name","id","message","console","log"],"mappings":";;;;AAAA,SAASA,aAAT,QAA8B,4BAA9B;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAWC,OAAX,qBAAuBF,GAAG,CAACG,IAA3B;AACA,QAAMC,OAAO,GAAG,EAAhB;;AAEA,MAAI;AACF,UAAMC,SAAS,GAAG,MAAMN,aAAa,CAACO,YAAd,CAA2B;AAAEJ,MAAAA;AAAF,KAA3B,CAAxB;AACA,UAAMK,SAAS,GAAG,MAAMR,aAAa,CAACS,gBAAd,EAAxB;AACA,UAAMC,KAAK,GAAG,MAAMJ,SAAS,CAACI,KAA9B;AACA,UAAMC,OAAO,GAAGC,IAAI,CAACC,IAAL,CAAUH,KAAK,GAAGL,OAAlB,CAAhB;;AACA,UAAM;AAAES,MAAAA;AAAF,QAA4BX,OAAlC;AAAA,UAAiBY,YAAjB,4BAAkCZ,OAAlC;;AAEAD,IAAAA,GAAG,CAACc,UAAJ,GAAiB,GAAjB;AACAd,IAAAA,GAAG,CAACe,IAAJ,CAAS;AACPX,MAAAA,SADO;AAEPE,MAAAA,SAAS,EAAEA,SAAS,CAACU,OAAV,CAAkBC,GAAlB,CAAsB,CAAC;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAD,MAAmB;AAAED,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAnB,CAAtB,CAFJ;AAGPP,MAAAA,IAAI,EAAEX,OAAO,CAACW,IAHP;AAIPH,MAAAA,OAJO;AAKPR,MAAAA,OAAO,EAAEY;AALF,KAAT;AAOD,GAfD,CAeE,OAAO;AAAEO,IAAAA;AAAF,GAAP,EAAoB;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACD;AACF,CAtBD","sourcesContent":["import { rawgConnector } from '../../utils/rawg-connector';\n\nexport default async (req, res) => {\n  const { ...options } = req.body;\n  const perPage = 20;\n\n  try {\n    const gamesData = await rawgConnector.getGamesData({ options });\n    const platforms = await rawgConnector.getPlatformsData();\n    const count = await gamesData.count;\n    const maxPage = Math.ceil(count / perPage);\n    const { page, ...otherOptions } = options;\n\n    res.statusCode = 200;\n    res.json({\n      gamesData,\n      platforms: platforms.results.map(({ name, id }) => ({ name, id })),\n      page: options.page,\n      maxPage,\n      options: otherOptions,\n    });\n  } catch ({ message }) {\n    console.log(message);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}