{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { rawgConnector } from '../../utils/rawg-connector';\nexport default (async (req, res) => {\n  const _req$body = req.body,\n        {\n    search\n  } = _req$body,\n        options = _objectWithoutProperties(_req$body, [\"search\"]);\n\n  const perPage = 20;\n\n  try {\n    const gamesData = await rawgConnector.getGamesData({\n      search,\n      options\n    });\n    const {\n      count\n    } = gamesData;\n    const maxPage = Math.ceil(count / perPage);\n    console.log(maxPage);\n    res.statusCode = 200;\n    res.json({\n      gamesData,\n      page: options.page,\n      maxPage\n    });\n  } catch ({\n    message\n  }) {\n    console.log(message);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}