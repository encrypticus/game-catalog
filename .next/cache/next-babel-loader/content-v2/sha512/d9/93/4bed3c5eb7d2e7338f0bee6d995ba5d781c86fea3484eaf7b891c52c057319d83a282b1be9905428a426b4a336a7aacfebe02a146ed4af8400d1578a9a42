{"ast":null,"code":"import _defineProperty from \"D:/MyProjects/game-catalog/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"D:/MyProjects/game-catalog/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSlice } from '@reduxjs/toolkit';\nvar initialState = {\n  gamesData: {\n    count: '',\n    results: []\n  },\n  options: {},\n  query: ''\n};\nvar gamesReducer = createSlice({\n  name: 'gamesData',\n  initialState: initialState,\n  reducers: {\n    add: function add(state, _ref) {\n      var _ref$payload = _ref.payload,\n          count = _ref$payload.count,\n          results = _ref$payload.results;\n      var currentResults = state.gamesData.results;\n      var filtered = results.filter(function (el) {\n        return currentResults.every(function (cur) {\n          return el.id !== cur.id;\n        });\n      });\n      state.gamesData.count = count;\n      state.gamesData.results = [].concat(_toConsumableArray(currentResults), _toConsumableArray(filtered));\n    },\n    clearGamesData: function clearGamesData(state) {\n      state.gamesData = {\n        count: 0,\n        results: []\n      };\n    },\n    changeOptions: function changeOptions(state, _ref2) {\n      var payload = _ref2.payload;\n      state.options = _objectSpread(_objectSpread({}, state.options), payload);\n    },\n    resetFilter: function resetFilter(state) {\n      delete state.options.platforms;\n    }\n  }\n});\nvar gamesDataReducer = gamesReducer.reducer,\n    _gamesReducer$actions = gamesReducer.actions,\n    add = _gamesReducer$actions.add,\n    clearGamesData = _gamesReducer$actions.clearGamesData,\n    changeOptions = _gamesReducer$actions.changeOptions,\n    resetFilter = _gamesReducer$actions.resetFilter;\nexport { gamesDataReducer, add, clearGamesData, changeOptions, resetFilter };","map":null,"metadata":{},"sourceType":"module"}