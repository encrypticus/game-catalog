{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  gamesData: {\n    count: '',\n    results: []\n  },\n  options: {},\n  query: ''\n};\nconst gamesReducer = createSlice({\n  name: 'gamesData',\n  initialState,\n  reducers: {\n    add(state, {\n      payload: {\n        count,\n        results\n      }\n    }) {\n      const {\n        gamesData: {\n          results: currentResults\n        }\n      } = state;\n      const filtered = results.filter(el => currentResults.every(cur => el.id !== cur.id));\n      state.gamesData.count = count;\n      state.gamesData.results = [...currentResults, ...filtered];\n    },\n\n    clearGamesData(state) {\n      state.gamesData = {\n        count: 0,\n        results: []\n      };\n    },\n\n    changeOptions(state, {\n      payload\n    }) {\n      state.options = _objectSpread(_objectSpread({}, state.options), payload);\n    },\n\n    resetFilter(state) {\n      delete state.options.platforms;\n    }\n\n  }\n});\nexport const {\n  reducer: gamesDataReducer,\n  actions: {\n    add,\n    clearGamesData,\n    changeOptions,\n    resetFilter\n  }\n} = gamesReducer;","map":null,"metadata":{},"sourceType":"module"}