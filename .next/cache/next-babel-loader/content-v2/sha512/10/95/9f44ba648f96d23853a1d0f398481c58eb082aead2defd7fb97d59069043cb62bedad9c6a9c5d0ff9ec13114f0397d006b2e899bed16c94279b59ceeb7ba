{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MyProjects\\\\game-catalog\\\\components\\\\GameList\\\\GameList.jsx\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport Router, { useRouter } from 'next/router';\nimport PropTypes from 'prop-types';\nimport { MetroSpinner } from 'react-spinners-kit';\nimport { GameListItem } from './GameListItem';\nimport { useStyles } from './styles';\nexport const GameList = ({\n  gamesData\n}) => {\n  const styles = useStyles();\n  const router = useRouter();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n\n  const startLoading = () => setLoading(true);\n\n  const stopLoading = () => setLoading(false);\n\n  let currentPage = 1;\n  useEffect(() => {\n    Router.events.on('routeChangeStart', startLoading);\n    Router.events.on('routeChangeComplete', stopLoading);\n    return () => {\n      Router.events.off('routeChangeStart', startLoading);\n      Router.events.off('routeChangeComplete', stopLoading);\n    };\n  }, []);\n\n  const handleScroll = () => {\n    const lastItemLoaded = document.querySelector('.game-list > .game-list__item:last-child');\n\n    if (lastItemLoaded) {\n      const lastItemLoadedOffset = lastItemLoaded.offsetTop + lastItemLoaded.clientHeight;\n      const pageOffset = window.pageYOffset + window.innerHeight;\n\n      if (pageOffset > lastItemLoadedOffset && !loading) {\n        const nextPage = parseInt(gamesData.page, 10) + 1; // const settings = {\n        //   options: { page: nextPage, ...options },\n        //   mediaType: storeMediaType,\n        // };\n        // const optionsQueryString = getQueryString(settings.options);\n\n        const queryString = `${router.pathname}?page=${nextPage}`;\n        router.push(queryString);\n      }\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  });\n\n  const renderGameList = () => gamesData.results.map(gameListItem => /*#__PURE__*/_jsxDEV(GameListItem, {\n    gameInfo: gameListItem\n  }, gameListItem.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 7\n  }, this));\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      className: `${styles.root} game-list`,\n      children: renderGameList()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(MetroSpinner, {\n      color: \"#83838A\",\n      size: 60\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true);\n};\nGameList.propTypes = {\n  gamesData: PropTypes.object.isRequired\n};","map":{"version":3,"sources":["D:/MyProjects/game-catalog/components/GameList/GameList.jsx"],"names":["React","useEffect","useRef","useState","Router","useRouter","PropTypes","MetroSpinner","GameListItem","useStyles","GameList","gamesData","styles","router","loading","setLoading","startLoading","stopLoading","currentPage","events","on","off","handleScroll","lastItemLoaded","document","querySelector","lastItemLoadedOffset","offsetTop","clientHeight","pageOffset","window","pageYOffset","innerHeight","nextPage","parseInt","page","queryString","pathname","push","addEventListener","removeEventListener","renderGameList","results","map","gameListItem","id","root","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nimport Router, { useRouter } from 'next/router';\nimport PropTypes from 'prop-types';\nimport { MetroSpinner } from 'react-spinners-kit';\n\nimport { GameListItem } from './GameListItem';\nimport { useStyles } from './styles';\n\nexport const GameList = ({ gamesData }) => {\n  const styles = useStyles();\n  const router = useRouter();\n  const [loading, setLoading] = useState(false);\n  const startLoading = () => setLoading(true);\n  const stopLoading = () => setLoading(false);\n  let currentPage = 1;\n\n  useEffect(() => {\n    Router.events.on('routeChangeStart', startLoading);\n    Router.events.on('routeChangeComplete', stopLoading);\n    return () => {\n      Router.events.off('routeChangeStart', startLoading);\n      Router.events.off('routeChangeComplete', stopLoading);\n    };\n  }, []);\n\n  const handleScroll = () => {\n    const lastItemLoaded = document.querySelector('.game-list > .game-list__item:last-child');\n\n    if (lastItemLoaded) {\n      const lastItemLoadedOffset = lastItemLoaded.offsetTop + lastItemLoaded.clientHeight;\n      const pageOffset = window.pageYOffset + window.innerHeight;\n\n      if (pageOffset > lastItemLoadedOffset && !loading) {\n        const nextPage = parseInt(gamesData.page, 10) + 1;\n\n        // const settings = {\n        //   options: { page: nextPage, ...options },\n        //   mediaType: storeMediaType,\n        // };\n\n        // const optionsQueryString = getQueryString(settings.options);\n        const queryString = `${router.pathname}?page=${nextPage}`;\n\n        router.push(queryString);\n      }\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  });\n\n  const renderGameList = () => (\n    gamesData.results.map((gameListItem) => (\n      <GameListItem\n        key={gameListItem.id}\n        gameInfo={gameListItem}\n      />\n    ))\n  );\n\n  return (\n    <>\n      <ul className={`${styles.root} game-list`}>\n        {renderGameList()}\n      </ul>\n      {\n        loading && <MetroSpinner color=\"#83838A\" size={60} />\n      }\n    </>\n  );\n};\nGameList.propTypes = {\n  gamesData: PropTypes.object.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}