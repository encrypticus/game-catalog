{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\MyProjects\\\\game-catalog\\\\pages\\\\game\\\\[slug].js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport Router from 'next/router';\nimport PropTypes from 'prop-types';\nimport { MetroSpinner } from 'react-spinners-kit';\nimport { PageHead } from '../../components/Head';\nimport { Header } from '../../components/Header';\nimport { Slider } from '../../components/Slider';\nimport { rawgConnector } from '../../utils/rawg-connector';\nexport default function Game({\n  game,\n  screenshots\n}) {\n  const {\n    name,\n    slug,\n    description,\n    website\n  } = game;\n  const descrRef = useRef(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n\n  const startLoading = () => setLoading(true);\n\n  const stopLoading = () => setLoading(false);\n\n  useEffect(() => {\n    const descrBlock = descrRef.current;\n    descrBlock && (descrBlock.innerHTML = description);\n  }, []);\n  useEffect(() => {\n    Router.events.on('routeChangeStart', startLoading);\n    Router.events.on('routeChangeComplete', stopLoading);\n    return () => {\n      Router.events.off('routeChangeStart', startLoading);\n      Router.events.off('routeChangeComplete', stopLoading);\n    };\n  }, []);\n\n  const renderSpinner = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spinner-container\",\n    children: /*#__PURE__*/_jsxDEV(MetroSpinner, {\n      color: \"#83838A\",\n      size: 60\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-container\",\n    children: [/*#__PURE__*/_jsxDEV(PageHead, {\n      title: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '80%',\n            margin: 'auto'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Slider, {\n            urls: screenshots,\n            alt: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this), loading && renderSpinner()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"name: \", slug]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"site: \", website]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"description\",\n          ref: descrRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\nGame.propTypes = {\n  game: PropTypes.object.isRequired\n};\nexport async function getServerSideProps({\n  query\n}) {\n  const {\n    slug,\n    screenshots\n  } = query;\n  let game;\n\n  try {\n    game = await rawgConnector.getGameData(slug);\n  } catch ({\n    message\n  }) {\n    game = {\n      error: {\n        message\n      }\n    };\n  }\n\n  return {\n    props: {\n      game,\n      screenshots: JSON.parse(screenshots)\n    }\n  };\n}","map":{"version":3,"sources":["D:/MyProjects/game-catalog/pages/game/[slug].js"],"names":["React","useEffect","useRef","useState","Router","PropTypes","MetroSpinner","PageHead","Header","Slider","rawgConnector","Game","game","screenshots","name","slug","description","website","descrRef","loading","setLoading","startLoading","stopLoading","descrBlock","current","innerHTML","events","on","off","renderSpinner","width","margin","propTypes","object","isRequired","getServerSideProps","query","getGameData","message","error","props","JSON","parse"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AAEA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AAEA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,SAASC,aAAT,QAA8B,4BAA9B;AAEA,eAAe,SAASC,IAAT,CAAc;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAd,EAAqC;AAClD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcC,IAAAA,WAAd;AAA2BC,IAAAA;AAA3B,MAAwCL,IAA9C;AACA,QAAMM,QAAQ,GAAGhB,MAAM,CAAC,IAAD,CAAvB;AACA,QAAM;AAAA,OAACiB,OAAD;AAAA,OAAUC;AAAV,MAAwBjB,QAAQ,CAAC,KAAD,CAAtC;;AACA,QAAMkB,YAAY,GAAG,MAAMD,UAAU,CAAC,IAAD,CAArC;;AACA,QAAME,WAAW,GAAG,MAAMF,UAAU,CAAC,KAAD,CAApC;;AAEAnB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMsB,UAAU,GAAGL,QAAQ,CAACM,OAA5B;AACAD,IAAAA,UAAU,KAAKA,UAAU,CAACE,SAAX,GAAuBT,WAA5B,CAAV;AACD,GAHQ,EAGN,EAHM,CAAT;AAKAf,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,MAAM,CAACsB,MAAP,CAAcC,EAAd,CAAiB,kBAAjB,EAAqCN,YAArC;AACAjB,IAAAA,MAAM,CAACsB,MAAP,CAAcC,EAAd,CAAiB,qBAAjB,EAAwCL,WAAxC;AACA,WAAO,MAAM;AACXlB,MAAAA,MAAM,CAACsB,MAAP,CAAcE,GAAd,CAAkB,kBAAlB,EAAsCP,YAAtC;AACAjB,MAAAA,MAAM,CAACsB,MAAP,CAAcE,GAAd,CAAkB,qBAAlB,EAAyCN,WAAzC;AACD,KAHD;AAID,GAPQ,EAON,EAPM,CAAT;;AASA,QAAMO,aAAa,GAAG,mBACpB;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA,2BACE,QAAC,YAAD;AAAc,MAAA,KAAK,EAAC,SAApB;AAA8B,MAAA,IAAI,EAAE;AAApC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BACE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEf;AAAjB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACE;AAAK,UAAA,KAAK,EAAE;AAAEgB,YAAAA,KAAK,EAAE,KAAT;AAAgBC,YAAAA,MAAM,EAAE;AAAxB,WAAZ;AAAA,kCACE,QAAC,MAAD;AACE,YAAA,IAAI,EAAElB,WADR;AAEE,YAAA,GAAG,EAAEC;AAFP;AAAA;AAAA;AAAA;AAAA,kBADF,EAKGK,OAAO,IAAIU,aAAa,EAL3B;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE;AAAA,+BAAYd,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF,eASE;AAAA,+BAAYE,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF,eAUE;AAAK,UAAA,EAAE,EAAC,aAAR;AAAsB,UAAA,GAAG,EAAEC;AAA3B;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD;AAEDP,IAAI,CAACqB,SAAL,GAAiB;AACfpB,EAAAA,IAAI,EAAEP,SAAS,CAAC4B,MAAV,CAAiBC;AADR,CAAjB;AAIA,OAAO,eAAeC,kBAAf,CAAkC;AAAEC,EAAAA;AAAF,CAAlC,EAA6C;AAClD,QAAM;AAAErB,IAAAA,IAAF;AAAQF,IAAAA;AAAR,MAAwBuB,KAA9B;AACA,MAAIxB,IAAJ;;AAEA,MAAI;AACFA,IAAAA,IAAI,GAAG,MAAMF,aAAa,CAAC2B,WAAd,CAA0BtB,IAA1B,CAAb;AACD,GAFD,CAEE,OAAO;AAAEuB,IAAAA;AAAF,GAAP,EAAoB;AACpB1B,IAAAA,IAAI,GAAG;AAAE2B,MAAAA,KAAK,EAAE;AAAED,QAAAA;AAAF;AAAT,KAAP;AACD;;AAED,SAAO;AACLE,IAAAA,KAAK,EAAE;AACL5B,MAAAA,IADK;AAELC,MAAAA,WAAW,EAAE4B,IAAI,CAACC,KAAL,CAAW7B,WAAX;AAFR;AADF,GAAP;AAMD","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nimport Router from 'next/router';\nimport PropTypes from 'prop-types';\nimport { MetroSpinner } from 'react-spinners-kit';\n\nimport { PageHead } from '../../components/Head';\nimport { Header } from '../../components/Header';\nimport { Slider } from '../../components/Slider';\nimport { rawgConnector } from '../../utils/rawg-connector';\n\nexport default function Game({ game, screenshots }) {\n  const { name, slug, description, website, } = game;\n  const descrRef = useRef(null);\n  const [loading, setLoading] = useState(false);\n  const startLoading = () => setLoading(true);\n  const stopLoading = () => setLoading(false);\n\n  useEffect(() => {\n    const descrBlock = descrRef.current;\n    descrBlock && (descrBlock.innerHTML = description);\n  }, []);\n\n  useEffect(() => {\n    Router.events.on('routeChangeStart', startLoading);\n    Router.events.on('routeChangeComplete', stopLoading);\n    return () => {\n      Router.events.off('routeChangeStart', startLoading);\n      Router.events.off('routeChangeComplete', stopLoading);\n    };\n  }, []);\n\n  const renderSpinner = () => (\n    <div className=\"spinner-container\">\n      <MetroSpinner color=\"#83838A\" size={60} />\n    </div>\n  );\n\n  return (\n    <div className=\"page-container\">\n      <PageHead title={name} />\n      <Header />\n      <main>\n        <div className=\"container\">\n          <div style={{ width: '80%', margin: 'auto' }}>\n            <Slider\n              urls={screenshots}\n              alt={name}\n            />\n            {loading && renderSpinner()}\n          </div>\n          <div>name: {slug}</div>\n          <div>site: {website}</div>\n          <div id=\"description\" ref={descrRef}></div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nGame.propTypes = {\n  game: PropTypes.object.isRequired,\n};\n\nexport async function getServerSideProps({ query }) {\n  const { slug, screenshots } = query;\n  let game;\n\n  try {\n    game = await rawgConnector.getGameData(slug);\n  } catch ({ message }) {\n    game = { error: { message } };\n  }\n\n  return {\n    props: {\n      game,\n      screenshots: JSON.parse(screenshots),\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}